import React, { useState, useEffect } from 'react';

// Hook ูุฎุตุต ูุฅุฏุงุฑุฉ ุฅุนุฏุงุฏุงุช ุงูุฅุญุตุงุฆูุงุช
const useStatisticsSettings = () => {
  const [settings, setSettings] = useState([]);
  const [enabledStats, setEnabledStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const API_BASE = 'http://localhost:8001/api';

  // ุฌูุจ ุฌููุน ุงูุฅุนุฏุงุฏุงุช
  const fetchAllSettings = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/statistics-settings`);
      const data = await response.json();
      
      if (data.success) {
        setSettings(data.data);
      } else {
        setError('ูุดู ูู ุฌูุจ ุงูุฅุนุฏุงุฏุงุช');
      }
    } catch (err) {
      setError('ุฎุทุฃ ูู ุงูุงุชุตุงู: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  // ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุงูููุนูุฉ ููุท
  const fetchEnabledStats = async () => {
    try {
      const response = await fetch(`${API_BASE}/statistics-settings/enabled`);
      const data = await response.json();
      
      if (data.success) {
        setEnabledStats(data.data);
      }
    } catch (err) {
      console.error('ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุงูููุนูุฉ:', err);
    }
  };

  // ุชูุนูู/ุฅูุบุงุก ุชูุนูู ุฅุญุตุงุฆูุฉ
  const toggleStatistic = async (statisticKey, isEnabled) => {
    try {
      const response = await fetch(`${API_BASE}/statistics-settings/toggle`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          statistic_key: statisticKey,
          is_enabled: isEnabled
        })
      });

      const data = await response.json();
      
      if (data.success) {
        // ุชุญุฏูุซ ุงูุญุงูุฉ ุงููุญููุฉ
        setSettings(prev => 
          prev.map(setting => 
            setting.statistic_key === statisticKey 
              ? { ...setting, is_enabled: isEnabled }
              : setting
          )
        );
        
        // ุฅุนุงุฏุฉ ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุงูููุนูุฉ
        await fetchEnabledStats();
        
        return { success: true, message: data.message };
      } else {
        return { success: false, message: data.message };
      }
    } catch (err) {
      return { success: false, message: 'ุฎุทุฃ ูู ุงูุงุชุตุงู: ' + err.message };
    }
  };

  // ุงูุชุญูู ูู ุชูุนูู ุฅุญุตุงุฆูุฉ ูุนููุฉ
  const isStatisticEnabled = (statisticKey) => {
    return enabledStats.includes(statisticKey);
  };

  useEffect(() => {
    fetchAllSettings();
    fetchEnabledStats();
  }, []);

  return {
    settings,
    enabledStats,
    loading,
    error,
    toggleStatistic,
    isStatisticEnabled,
    fetchAllSettings,
    fetchEnabledStats
  };
};

// ูููู ููุญุฉ ุชุญูู ุงูุฅุนุฏุงุฏุงุช (ูููุฏูุฑูู)
const StatisticsSettingsPanel = () => {
  const { 
    settings, 
    loading, 
    error, 
    toggleStatistic 
  } = useStatisticsSettings();

  const [message, setMessage] = useState('');

  const handleToggle = async (statisticKey, currentStatus) => {
    const result = await toggleStatistic(statisticKey, !currentStatus);
    setMessage(result.message);
    
    // ุฅุฎูุงุก ุงูุฑุณุงูุฉ ุจุนุฏ 3 ุซูุงู
    setTimeout(() => setMessage(''), 3000);
  };

  if (loading) return <div className="loading">ุฌุงุฑู ุงูุชุญููู...</div>;
  if (error) return <div className="error">ุฎุทุฃ: {error}</div>;

  return (
    <div className="statistics-settings-panel">
      <h2>โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุฅุญุตุงุฆูุงุช</h2>
      <p>ููููู ุงูุชุญูู ูู ุงูุฅุญุตุงุฆูุงุช ุงูุชู ุชุธูุฑ ูู ุงููุงุฌูุฉ ุงูุฃูุงููุฉ</p>
      
      {message && (
        <div className={`message ${message.includes('ูุฌุญ') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

      <div className="settings-grid">
        {settings.map(setting => (
          <div key={setting.id} className={`setting-card ${setting.is_enabled ? 'enabled' : 'disabled'}`}>
            <div className="setting-header">
              <h3>{setting.statistic_name_ar}</h3>
              <label className="toggle-switch">
                <input
                  type="checkbox"
                  checked={setting.is_enabled}
                  onChange={() => handleToggle(setting.statistic_key, setting.is_enabled)}
                />
                <span className="slider"></span>
              </label>
            </div>
            
            <div className="setting-details">
              <p className="description">{setting.description}</p>
              <div className="metadata">
                <span className="key">๐ {setting.statistic_key}</span>
                <span className="order">๐ ุชุฑุชูุจ: {setting.display_order}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// ูููู ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช (ูููุณุชุฎุฏููู)
const StatisticsDashboard = () => {
  const { enabledStats, loading, isStatisticEnabled } = useStatisticsSettings();
  const [statisticsData, setStatisticsData] = useState({});

  // ูุญุงูุงุฉ ุฌูุจ ุจูุงูุงุช ุงูุฅุญุตุงุฆูุงุช
  const fetchStatisticData = async (statKey) => {
    try {
      // ููุง ุณุชุณุชุฏุนู ุงูู endpoint ุงูุญูููู ููุฅุญุตุงุฆูุฉ
      const response = await fetch(`http://localhost:8001/api/statistics/${statKey}`);
      const data = await response.json();
      return data;
    } catch (err) {
      console.error(`ุฎุทุฃ ูู ุฌูุจ ุฅุญุตุงุฆูุฉ ${statKey}:`, err);
      return null;
    }
  };

  useEffect(() => {
    // ุฌูุจ ุจูุงูุงุช ุงูุฅุญุตุงุฆูุงุช ุงูููุนูุฉ ููุท
    enabledStats.forEach(async (statKey) => {
      const data = await fetchStatisticData(statKey);
      if (data) {
        setStatisticsData(prev => ({
          ...prev,
          [statKey]: data
        }));
      }
    });
  }, [enabledStats]);

  if (loading) return <div className="loading">ุฌุงุฑู ุชุญููู ููุญุฉ ุงูุชุญูู...</div>;

  return (
    <div className="statistics-dashboard">
      <h1>๐ ููุญุฉ ูุนูููุงุช ุงูุฅุญุตุงุฆูุงุช</h1>
      
      {enabledStats.length === 0 ? (
        <div className="no-statistics">
          <p>ูุง ุชูุฌุฏ ุฅุญุตุงุฆูุงุช ููุนูุฉ ููุนุฑุถ</p>
        </div>
      ) : (
        <div className="statistics-grid">
          {/* ุงูุฅุญุตุงุฆูุงุช ุงูุนุงูุฉ */}
          {isStatisticEnabled('overview') && (
            <div className="stat-card overview">
              <h3>๐ ุงูุฅุญุตุงุฆูุงุช ุงูุนุงูุฉ</h3>
              <div className="stat-content">
                {statisticsData.overview ? (
                  <div>ุจูุงูุงุช ุงูุฅุญุตุงุฆูุงุช ุงูุนุงูุฉ</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุฅุญุตุงุฆูุงุช ุงูุฅุดุบุงู */}
          {isStatisticEnabled('occupancy') && (
            <div className="stat-card occupancy">
              <h3>๐ข ุฅุญุตุงุฆูุงุช ุงูุฅุดุบุงู</h3>
              <div className="stat-content">
                {statisticsData.occupancy ? (
                  <div>ุจูุงูุงุช ุฅุญุตุงุฆูุงุช ุงูุฅุดุบุงู</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ */}
          {isStatisticEnabled('monthly_revenue') && (
            <div className="stat-card revenue">
              <h3>๐ฐ ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ</h3>
              <div className="stat-content">
                {statisticsData.monthly_revenue ? (
                  <div>ุจูุงูุงุช ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ูุนุฏูุงุช ุงูุชุญุตูู */}
          {isStatisticEnabled('collection_rates') && (
            <div className="stat-card collection">
              <h3>๐ ูุนุฏูุงุช ุงูุชุญุตูู</h3>
              <div className="stat-content">
                {statisticsData.collection_rates ? (
                  <div>ุจูุงูุงุช ูุนุฏูุงุช ุงูุชุญุตูู</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ููุงุฑูุฉ ุงูุฃุฏุงุก ุงูุดูุฑู */}
          {isStatisticEnabled('monthly_comparison') && (
            <div className="stat-card comparison">
              <h3>๐ ููุงุฑูุฉ ุงูุฃุฏุงุก ุงูุดูุฑู</h3>
              <div className="stat-content">
                {statisticsData.monthly_comparison ? (
                  <div>ุจูุงูุงุช ููุงุฑูุฉ ุงูุฃุฏุงุก</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุฃุฏุงุก ุงููุจุงูู */}
          {isStatisticEnabled('building_performance') && (
            <div className="stat-card buildings">
              <h3>๐๏ธ ุฃุฏุงุก ุงููุจุงูู</h3>
              <div className="stat-content">
                {statisticsData.building_performance ? (
                  <div>ุจูุงูุงุช ุฃุฏุงุก ุงููุจุงูู</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุงูุฃุฏุงุก ุงููุงูู ุงูุณููู */}
          {isStatisticEnabled('annual_financial') && (
            <div className="stat-card annual">
              <h3>๐ ุงูุฃุฏุงุก ุงููุงูู ุงูุณููู</h3>
              <div className="stat-content">
                {statisticsData.annual_financial ? (
                  <div>ุจูุงูุงุช ุงูุฃุฏุงุก ุงููุงูู ุงูุณููู</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุงููุดุงุทุงุช ุงูุญุฏูุซุฉ */}
          {isStatisticEnabled('recent_activities') && (
            <div className="stat-card activities">
              <h3>โก ุงููุดุงุทุงุช ุงูุญุฏูุซุฉ</h3>
              <div className="stat-content">
                {statisticsData.recent_activities ? (
                  <div>ุจูุงูุงุช ุงููุดุงุทุงุช ุงูุญุฏูุซุฉ</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}

          {/* ุชูุฑูุฑ ุดุงูู */}
          {isStatisticEnabled('dashboard') && (
            <div className="stat-card dashboard">
              <h3>๐ ุงูุชูุฑูุฑ ุงูุดุงูู</h3>
              <div className="stat-content">
                {statisticsData.dashboard ? (
                  <div>ุจูุงูุงุช ุงูุชูุฑูุฑ ุงูุดุงูู</div>
                ) : (
                  <div className="loading-stat">ุฌุงุฑู ุงูุชุญููู...</div>
                )}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// ุงููููู ุงูุฑุฆูุณู
const App = () => {
  const [currentView, setCurrentView] = useState('dashboard');

  return (
    <div className="app">
      <nav className="navigation">
        <button 
          className={currentView === 'dashboard' ? 'active' : ''}
          onClick={() => setCurrentView('dashboard')}
        >
          ๐ ููุญุฉ ุงูุฅุญุตุงุฆูุงุช
        </button>
        <button 
          className={currentView === 'settings' ? 'active' : ''}
          onClick={() => setCurrentView('settings')}
        >
          โ๏ธ ุฅุนุฏุงุฏุงุช ุงูุฅุญุตุงุฆูุงุช
        </button>
      </nav>

      <main className="main-content">
        {currentView === 'dashboard' ? (
          <StatisticsDashboard />
        ) : (
          <StatisticsSettingsPanel />
        )}
      </main>
    </div>
  );
};

export default App;
